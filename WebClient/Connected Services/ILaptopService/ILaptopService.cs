//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClient.ILaptopService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Laptop", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
    public partial class Laptop : object
    {
        
        private System.Nullable<int> ClockSpeedField;
        
        private string DiskCapacityField;
        
        private string DiskTypeField;
        
        private string GraphicCardField;
        
        private string GraphicCardMemoryField;
        
        private int IdField;
        
        private string IsTouchScreenField;
        
        private string MemorySizeField;
        
        private string OperatingSystemField;
        
        private System.Nullable<int> PhysicalCoresField;
        
        private string PhysicalDriveTypeField;
        
        private string ProcessorField;
        
        private string ProducerField;
        
        private string ScreenDiagonalField;
        
        private string ScreenResolutionField;
        
        private string ScreenSurfaceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ClockSpeed
        {
            get
            {
                return this.ClockSpeedField;
            }
            set
            {
                this.ClockSpeedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskCapacity
        {
            get
            {
                return this.DiskCapacityField;
            }
            set
            {
                this.DiskCapacityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskType
        {
            get
            {
                return this.DiskTypeField;
            }
            set
            {
                this.DiskTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GraphicCard
        {
            get
            {
                return this.GraphicCardField;
            }
            set
            {
                this.GraphicCardField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GraphicCardMemory
        {
            get
            {
                return this.GraphicCardMemoryField;
            }
            set
            {
                this.GraphicCardMemoryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IsTouchScreen
        {
            get
            {
                return this.IsTouchScreenField;
            }
            set
            {
                this.IsTouchScreenField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MemorySize
        {
            get
            {
                return this.MemorySizeField;
            }
            set
            {
                this.MemorySizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OperatingSystem
        {
            get
            {
                return this.OperatingSystemField;
            }
            set
            {
                this.OperatingSystemField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PhysicalCores
        {
            get
            {
                return this.PhysicalCoresField;
            }
            set
            {
                this.PhysicalCoresField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhysicalDriveType
        {
            get
            {
                return this.PhysicalDriveTypeField;
            }
            set
            {
                this.PhysicalDriveTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Processor
        {
            get
            {
                return this.ProcessorField;
            }
            set
            {
                this.ProcessorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Producer
        {
            get
            {
                return this.ProducerField;
            }
            set
            {
                this.ProducerField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenDiagonal
        {
            get
            {
                return this.ScreenDiagonalField;
            }
            set
            {
                this.ScreenDiagonalField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenResolution
        {
            get
            {
                return this.ScreenResolutionField;
            }
            set
            {
                this.ScreenResolutionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenSurface
        {
            get
            {
                return this.ScreenSurfaceField;
            }
            set
            {
                this.ScreenSurfaceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
    public partial class MissingProfileFault : object
    {
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WebClient.ILaptopService.ILaptopService")]
    public interface ILaptopService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetAllLaptops", ReplyAction="http://tempuri.org/ILaptopService/GetAllLaptopsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetAllLaptopsMissingProfileFaultFault", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<WebClient.ILaptopService.Laptop[]> GetAllLaptopsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetProducers", ReplyAction="http://tempuri.org/ILaptopService/GetProducersResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetProducersMissingProfileFaultFault", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<string[]> GetProducersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetAmountOfLaptopsByProducer", ReplyAction="http://tempuri.org/ILaptopService/GetAmountOfLaptopsByProducerResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetAmountOfLaptopsByProducerMissingProfileFault" +
            "Fault", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<int> GetAmountOfLaptopsByProducerAsync(string producer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetScreenSurfaces", ReplyAction="http://tempuri.org/ILaptopService/GetScreenSurfacesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetScreenSurfacesMissingProfileFaultFault", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<string[]> GetScreenSurfacesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetLaptopsByScreenSurface", ReplyAction="http://tempuri.org/ILaptopService/GetLaptopsByScreenSurfaceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetLaptopsByScreenSurfaceMissingProfileFaultFau" +
            "lt", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<WebClient.ILaptopService.Laptop[]> GetLaptopsByScreenSurfaceAsync(string screenSurface);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetScreenResolutions", ReplyAction="http://tempuri.org/ILaptopService/GetScreenResolutionsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetScreenResolutionsMissingProfileFaultFault", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<string[]> GetScreenResolutionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILaptopService/GetAmountOfLaptopsByScreenResolution", ReplyAction="http://tempuri.org/ILaptopService/GetAmountOfLaptopsByScreenResolutionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WebClient.ILaptopService.MissingProfileFault), Action="http://tempuri.org/ILaptopService/GetAmountOfLaptopsByScreenResolutionMissingProf" +
            "ileFaultFault", Name="MissingProfileFault", Namespace="http://schemas.datacontract.org/2004/07/SoapServer.Dto")]
        System.Threading.Tasks.Task<int> GetAmountOfLaptopsByScreenResolutionAsync(string screenResolution);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface ILaptopServiceChannel : WebClient.ILaptopService.ILaptopService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class LaptopServiceClient : System.ServiceModel.ClientBase<WebClient.ILaptopService.ILaptopService>, WebClient.ILaptopService.ILaptopService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public LaptopServiceClient() : 
                base(LaptopServiceClient.GetDefaultBinding(), LaptopServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ILaptopService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LaptopServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(LaptopServiceClient.GetBindingForEndpoint(endpointConfiguration), LaptopServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LaptopServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(LaptopServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LaptopServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(LaptopServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public LaptopServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<WebClient.ILaptopService.Laptop[]> GetAllLaptopsAsync()
        {
            return base.Channel.GetAllLaptopsAsync();
        }
        
        public System.Threading.Tasks.Task<string[]> GetProducersAsync()
        {
            return base.Channel.GetProducersAsync();
        }
        
        public System.Threading.Tasks.Task<int> GetAmountOfLaptopsByProducerAsync(string producer)
        {
            return base.Channel.GetAmountOfLaptopsByProducerAsync(producer);
        }
        
        public System.Threading.Tasks.Task<string[]> GetScreenSurfacesAsync()
        {
            return base.Channel.GetScreenSurfacesAsync();
        }
        
        public System.Threading.Tasks.Task<WebClient.ILaptopService.Laptop[]> GetLaptopsByScreenSurfaceAsync(string screenSurface)
        {
            return base.Channel.GetLaptopsByScreenSurfaceAsync(screenSurface);
        }
        
        public System.Threading.Tasks.Task<string[]> GetScreenResolutionsAsync()
        {
            return base.Channel.GetScreenResolutionsAsync();
        }
        
        public System.Threading.Tasks.Task<int> GetAmountOfLaptopsByScreenResolutionAsync(string screenResolution)
        {
            return base.Channel.GetAmountOfLaptopsByScreenResolutionAsync(screenResolution);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public new virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILaptopService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ILaptopService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:5099/LaptopService.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return LaptopServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ILaptopService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return LaptopServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ILaptopService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ILaptopService,
        }
    }
}
